set completeopt=menu,menuone,noselect

lua <<EOF
  local nvim_lsp = require('lspconfig')
  local cmp = require('cmp')
  local ts_utils = require("nvim-lsp-ts-utils")
  require("null-ls").config({})

  -- Setup nvim-cmp
  cmp.setup({
    snippet = {
      expand = function(args)
        -- vim.fn["vsnip#anonymous"](args.body) -- For `vsnip` users.
        -- require('luasnip').lsp_expand(args.body) -- For `luasnip` users.
        vim.fn["UltiSnips#Anon"](args.body) -- For `ultisnips` users.
        -- require'snippy'.expand_snippet(args.body) -- For `snippy` users.
      end,
    },
    mapping = {
      ['<C-d>'] = cmp.mapping(cmp.mapping.scroll_docs(-4), { 'i', 'c' }),
      ['<C-f>'] = cmp.mapping(cmp.mapping.scroll_docs(4), { 'i', 'c' }),
      ['<C-Space>'] = cmp.mapping(cmp.mapping.complete(), { 'i', 'c' }),
      ['<C-y>'] = cmp.config.disable, -- If you want to remove the default `<C-y>` mapping, You can specify `cmp.config.disable` value.
      ['<C-e>'] = cmp.mapping({
        i = cmp.mapping.abort(),
        c = cmp.mapping.close(),
      }),
      ['<CR>'] = cmp.mapping.confirm({ select = true }),
    },
    sources = cmp.config.sources({
      { name = 'nvim_lsp' },
      -- { name = 'vsnip' }, -- For vsnip users.
      -- { name = 'luasnip' }, -- For luasnip users.
      { name = 'ultisnips' }, -- For ultisnips users.
      -- { name = 'snippy' }, -- For snippy users.
    }, {
      { name = 'buffer' },
    })
  })

  -- Use buffer source for `/`
  cmp.setup.cmdline('/', {
    sources = {
      { name = 'buffer' }
    }
  })

  -- Use cmdline & path source for ':'
  cmp.setup.cmdline(':', {
    sources = cmp.config.sources({
      { name = 'path' }
    }, {
      { name = 'cmdline' }
    })
  })

  -- Setup lspconfig
  local capabilities = require('cmp_nvim_lsp').update_capabilities(
    vim.lsp.protocol.make_client_capabilities()
  )

  nvim_lsp.bashls.setup {
    capabilities = capabilities
  }
  nvim_lsp.pyright.setup {
    capabilities = capabilities
  }
  nvim_lsp.solargraph.setup {
    capabilities = capabilities,
    on_attach = function()
      -- format on save
      vim.cmd("autocmd BufWritePre <buffer> lua vim.lsp.buf.formatting_sync()")
    end
  }

  local buf_map = function(bufnr, mode, lhs, rhs, opts)
    vim.api.nvim_buf_set_keymap(bufnr, mode, lhs, rhs, opts or {
        silent = true,
    })
  end

  local on_attach = function(client, bufnr)
    -- vim.cmd("command! LspDef lua vim.lsp.buf.definition()")
    -- vim.cmd("command! LspFormatting lua vim.lsp.buf.formatting()")
    -- vim.cmd("command! LspCodeAction lua vim.lsp.buf.code_action()")
    -- vim.cmd("command! LspHover lua vim.lsp.buf.hover()")
    -- vim.cmd("command! LspRename lua vim.lsp.buf.rename()")
    -- vim.cmd("command! LspRefs lua vim.lsp.buf.references()")
    -- vim.cmd("command! LspTypeDef lua vim.lsp.buf.type_definition()")
    -- vim.cmd("command! LspImplementation lua vim.lsp.buf.implementation()")
    -- vim.cmd("command! LspDiagPrev lua vim.lsp.diagnostic.goto_prev()")
    -- vim.cmd("command! LspDiagNext lua vim.lsp.diagnostic.goto_next()")
    -- vim.cmd("command! LspDiagLine lua vim.lsp.diagnostic.show_line_diagnostics()")
    -- vim.cmd("command! LspSignatureHelp lua vim.lsp.buf.signature_help()")
    -- buf_map(bufnr, "n", "gd", ":LspDef<CR>")
    -- buf_map(bufnr, "n", "gr", ":LspRename<CR>")
    -- buf_map(bufnr, "n", "gy", ":LspTypeDef<CR>")
    -- buf_map(bufnr, "n", "K", ":LspHover<CR>")
    -- buf_map(bufnr, "n", "[a", ":LspDiagPrev<CR>")
    -- buf_map(bufnr, "n", "]a", ":LspDiagNext<CR>")
    -- buf_map(bufnr, "n", "ga", ":LspCodeAction<CR>")
    -- buf_map(bufnr, "n", "<Leader>a", ":LspDiagLine<CR>")
    -- buf_map(bufnr, "i", "<C-x><C-x>", "<cmd> LspSignatureHelp<CR>")

    if client.resolved_capabilities.document_formatting then
      vim.cmd("autocmd BufWritePre <buffer> lua vim.lsp.buf.formatting_sync()")
    end
  end
  
  nvim_lsp.tsserver.setup {
    on_attach = function(client, bufnr)
      client.resolved_capabilities.document_formatting = false
      client.resolved_capabilities.document_range_formatting = false

      ts_utils.setup {
        eslint_bin = "eslint_d",
        eslint_enable_diagnostics = true,
        eslint_enable_code_actions = true,
        enable_formatting = true,
        formatter = "prettier_d_slim",
      }
      ts_utils.setup_client(client)

      buf_map(bufnr, "n", "gs", ":TSLspOrganize<CR>")
      buf_map(bufnr, "n", "gi", ":TSLspRenameFile<CR>")
      buf_map(bufnr, "n", "go", ":TSLspImportAll<CR>")

      on_attach(client, bufnr)
    end
  }
  
  nvim_lsp["null-ls"].setup {
    on_attach = on_attach
  }

  -- nvim_lsp.tsserver.setup {
  --   capabilities = capabilities,
  --   on_attach = function()
  --     vim.cmd("autocmd BufWritePre <buffer> lua vim.lsp.buf.formatting_sync()")
  --   end
  -- }

  -- nvim_lsp.tsserver.setup {
  --   capabilities = capabilities,
  --   on_attach = function(client, bufnr)
  --     -- disable default tsserver formatting
  --     client.resolved_capabilities.document_formatting = false
  --     client.resolved_capabilities.document_range_formatting = false
  -- 
  --     local function
  --       buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...)
  --     end
  --     buf_set_option("omnifunc", "v:lua.vim.lsp.omnifunc")

  --     ts_utils.setup {
  --       debug = false,
  --       disable_commands = false,
  --       enable_import_on_completion = true,
  --       
  --       -- import all
  --       import_all_timeout = 5000, -- ms
  --       -- lower numbers indicate higher priority
  --       import_all_priorities = {
  --         same_file = 1, -- add to existing import statement
  --         local_files = 2, -- git files or files with relative path markers
  --         buffer_content = 3, -- loaded buffer content
  --         buffers = 4, -- loaded buffer names
  --       },
  --       import_all_scan_buffers = 100,
  --       import_all_select_source = false,

  --       -- eslint
  --       eslint_enable_code_actions = false,
  --       eslint_enable_disable_comments = false,
  --       eslint_bin = 'eslint_d',
  --       eslint_config_fallback = nil,
  --       eslint_enable_diagnostics = false,
  --       eslint_opts = {
  --         -- diagnostics_format = "#{m} [#{c}]",
  --         condition = function(utils)
  --           return utils.root_has_file(".eslintrc.js")
  --         end,
  --       },

  --       -- formatting
  --       enable_formatting = true,
  --       formatter = 'prettier_d_slim',
  --       formatter_config_fallback = nil,

  --       -- parentheses completion
  --       complete_parens = false,
  --       signature_help_in_parens = false,

  --       -- update imports on file move
  --       update_imports_on_move = true,
  --       require_confirmation_on_move = true,
  --       watch_dir = nil,

  --       -- filter diagnostics
  --       filter_out_diagnostics_by_severity = { "hint" },
  --       filter_out_diagnostics_by_code = {},
  --     }

  --     ts_utils.setup_client(client)

  --     -- format on save
  --     vim.cmd("autocmd BufWritePre <buffer> lua vim.lsp.buf.formatting_sync()")
  --   end
  -- }
EOF

" LSP config (the mappings used in the default file don't quite work right)
nnoremap <silent> gd <cmd>lua vim.lsp.buf.definition()<CR>
nnoremap <silent> gD <cmd>lua vim.lsp.buf.declaration()<CR>
nnoremap <silent> gr <cmd>lua vim.lsp.buf.references()<CR>
nnoremap <silent> gi <cmd>lua vim.lsp.buf.implementation()<CR>
nnoremap <silent> K <cmd>lua vim.lsp.buf.hover()<CR>
" nnoremap <silent> <C-k> <cmd>lua vim.lsp.buf.signature_help()<CR>
nnoremap <silent> <[-d> <cmd>lua vim.lsp.diagnostic.goto_prev()<CR>
nnoremap <silent> <]-d> <cmd>lua vim.lsp.diagnostic.goto_next()<CR>

" Create some formatting commands
:command -buffer Formatting lua vim.lsp.buf.formatting()
:command -buffer FormattingSync lua vim.lsp.buf.formatting_sync()

" auto-format (for non-LSP)
" autocmd BufWritePre *.js lua vim.lsp.buf.formatting_sync(nil, 100)
" autocmd BufWritePre *.jsx lua vim.lsp.buf.formatting_sync(nil, 100)
" autocmd BufWritePre *.ts lua vim.lsp.buf.formatting_sync(nil, 100)
" autocmd BufWritePre *.tsx lua vim.lsp.buf.formatting_sync(nil, 100)
" autocmd BufWritePre *.py lua vim.lsp.buf.formatting_sync(nil, 100)
" autocmd BufWritePre *.rb lua vim.lsp.buf.formatting_sync(nil, 100)
